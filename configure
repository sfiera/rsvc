#!/usr/bin/env python3

from __future__ import division, print_function, unicode_literals

import argparse
import collections
import glob
import os
import platform
import subprocess
import sys
import shlex

sys.path.append(os.path.join(os.path.dirname(__file__), "build", "lib", "scripts"))
try:
    import cfg
except ImportError:
    pass

BUNDLED = object()
SYSTEM = object()

DEPS = {
    "discid": {
        "pkgconfig": "libdiscid",
        "dpkg": "libdiscid-dev",
        "brew": "libdiscid",
        "headers": ["discid/discid.h"],
    },
    "flac": {
        "pkgconfig": "flac",
        "dpkg": "libflac-dev",
        "brew": "flac",
        "headers": ["FLAC/metadata.h"],
    },
    "lame": {
        "dpkg": "libmp3lame-dev",
        "brew": "lame",
        "headers": ["lame/lame.h"],
        "libraries": ["mp3lame"],
    },
    "mb5": {
        "pkgconfig": "libmusicbrainz5",
        "dpkg": "libmusicbrainz5-dev",
        "brew": "libmusicbrainz",
        "headers": ["musicbrainz5/mb5_c.h"],
    },
    "mad": {
        "pkgconfig": "mad",
        "dpkg": "libmad0-dev",
        "brew": "mad",
        "headers": ["mad.h"],
    },
    "mp4v2": {
        "dpkg": "libmp4v2-dev",
        "brew": "mp4v2",
        "headers": ["mp4v2/mp4v2.h"],
        "libraries": ["mp4v2"],
    },
    "neon": {
        "pkgconfig": "neon",
        "dpkg": "libneon27-dev",
        "brew": "neon",
        "headers": ["ne_uri.h"],
    },
    "ogg": {
        "pkgconfig": "ogg",
        "dpkg": "libogg-dev",
        "brew": "libogg",
        "headers": ["ogg/ogg.h"],
    },
    "opus": {
        "pkgconfig": "opus",
        "dpkg": "libopus-dev",
        "brew": "opus",
        "headers": ["opus.h"],
    },
    "opusfile": {
        "pkgconfig": "opusfile",
        "dpkg": "libopusfile-dev",
        "brew": "opusfile",
        "headers": ["opusfile.h"],
    },
    "vorbis": {
        "pkgconfig": "vorbis",
        "dpkg": "libvorbis-dev",
        "brew": "libvorbis",
        "headers": ["vorbis/codec.h"],
    },
}

def main():
    os.chdir(os.path.dirname(sys.argv[0]))
    progname = sys.argv[0]
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m",
        "--mode",
        metavar="MODE",
        type=str,
        choices="dbg dev opt".split(),
        default="opt",
        help="set build configuration:\n"
        "  - opt: compile for fast binaries (default)\n"
        "  - dev: compile for fast builds\n"
        "  - dbg: add debugging symbols")
    parser.add_argument(
        "-o", "--target-os", metavar="OS", type=str, help="target os (default: host os)")
    parser.add_argument(
        "--prefix",
        type=str,
        default="/usr/local",
        help="installation prefix (default: /usr/local)")
    for name in DEPS:
        parser.add_argument(
                "--with-system-" + name, dest=name, metavar="PREFIX", nargs="?", const=SYSTEM)
        parser.add_argument(
                "--with-bundled-" + name, dest=name, action="store_const", const=BUNDLED)
    args, remainder = parser.parse_known_args()

    defs = {}
    check_platform(args)
    check_arch()
    check_deps(args, defs)

    with cfg.step("configure mode") as msg:
        msg(args.mode, color="green")
    gn_args = {}
    gn_args["mode"] = args.mode
    gn_args["target_os"] = args.target_os
    # gn_args["prefix"] = args.prefix
    if args.target_os == "mac":
        gn_args["macosx_version_min"] = "10.7"
    cfg.gn(ninja="ninja", gn="gn", **gn_args)
    print("make(1) it so!")


def check_platform(args):
    with cfg.step("checking platform") as msg:
        if args.target_os is None:
            args.target_os = cfg.host_os()
        if args.target_os in ["mac", "linux"]:
            msg(args.target_os, color="green")
        else:
            msg(args.target_os, color="red")
            print("\nSorry! rsvc requires Mac OS X or Linux")
            sys.exit(1)


def check_arch():
    with cfg.step("checking architecture") as msg:
        arch = platform.uname()[4]
        if not arch:
            msg("unknown", color="red")
            sys.exit(1)
        elif arch in ["x86_64", "i386", "arm64"]:
            msg(arch, color="green")
        else:
            msg(arch + " (untested)", color="yellow")


def check_deps(args, defs):
    checker = {
        "mac": check_mac,
        "linux": check_linux,
    }[args.target_os]
    checker(args, defs)


def check_libs(args, defs, have_pkgconfig, package_manager, default):
    missing_libs = {}
    for name, value in sorted(DEPS.items()):
        flag = getattr(args, name)
        if flag is None:
            flag = default

        if flag is BUNDLED:
            with cfg.step("checking for %s" % name) as msg:
                msg("ok (bundled)", color="green")
            defs["BUNDLED_%s" % name.upper()] = 1
            continue

        with cfg.step("checking for %s" % name) as msg:
            include_dirs = []
            defines = []
            cflags = []
            library_dirs = []

            if (flag is SYSTEM) and ("pkgconfig" in value):
                if not have_pkgconfig:
                    msg("missing", color="red")
                    missing_libs[name] = value[package_manager]
                    continue
                settings = pkg_settings(value["pkgconfig"])
                if settings is None:
                    msg("missing", color="red")
                    missing_libs[name] = value[package_manager]
                    continue
                include_dirs, defines, cflags, library_dirs, libraries = settings
            else:
                if flag is not SYSTEM:
                    include_dirs = [os.path.join(flag, "include")]
                    library_dirs = [os.path.join(flag, "lib")]
                libraries = value["libraries"]

            if not has_lib(name, include_dirs, defines, cflags, value["headers"], library_dirs, libraries):
                msg("failed", color="red")
                missing_libs[name] = value[package_manager]
                continue

            defs["BUNDLED_%s" % name.upper()] = 0
            defs["%s_INCLUDE_DIRS" % name.upper()] = " ".join(include_dirs)
            defs["%s_DEFINES" % name.upper()] = " ".join(defines)
            defs["%s_CFLAGS" % name.upper()] = " ".join(cflags)
            defs["%s_LIBRARY_DIRS" % name.upper()] = " ".join(library_dirs)
            defs["%s_LIBRARIES" % name.upper()] = " ".join("-l" + l for l in libraries)

    return missing_libs


def check_mac(args, defs):
    with cfg.step("checking Mac OS X version") as msg:
        ver = platform.mac_ver()[0]
        ver = tuple(int(x) for x in ver.split(".")[:2])
        if ver < (10, 9):
            msg("%d.%d" % ver, color="red")
            print("\nSorry! rsvc requires Mac OS X 10.9+")
            sys.exit(1)
        msg("%d.%d" % ver, color="green")

    missing = collections.OrderedDict()
    if not cfg.check_clang():
        missing["xcode"] = (
                "* Xcode can be installed via the App Store:\n"
                "    https://itunes.apple.com/en/app/xcode/id497799835\n"
                "  After installing, open it and accept the license agreement\n")

    have_pkgconfig = True
    if not cfg.check_pkg_config():
        have_pkgconfig = False
        missing["pkg-config"] = (
                "* pkg-config can be installed with Homebrew:\n"
                "    $ brew install pkg-config\n")

    missing_libs = check_libs(args, defs, have_pkgconfig, "brew", default=BUNDLED)
    missing_deps = list(missing) + list(missing_libs)
    if missing_libs:
        missing["libs"] = (
                "* Missing libraries can be installed with Homebrew:\n"
                "    $ brew install %s\n" % " ".join(missing_libs.values()))

    if any("Homebrew" in v for v in missing.values()):
        if not cfg.check_bin("brew --version".split()):
            homebrew_url = "https://raw.githubusercontent.com/Homebrew/install/master/install"
            missing["homebrew"] = (
                    "* Homebrew can be installed like so:\n"
                    '    $ ruby -e "$(curl -fsSL %s)"\n') % homebrew_url

    if missing:
        print("\nmissing dependencies: %s\n" % " ".join(missing_deps))
        for step in missing.values():
            sys.stdout.write(step)
        sys.exit(1)


def check_linux(args, defs):
    with cfg.step("checking Linux distro") as msg:
        pretty, distro, codename = cfg.dist_proto()
        if distro == "Ubuntu":
            msg(" ".join(distro), color="green")
        else:
            msg(" ".join(distro) + " (untested)", color="yellow")

    missing = collections.OrderedDict()
    if not cfg.check_clang():
        missing["clang"] = "clang"
        missing["libc++"] = "libc++-dev"

    have_pkgconfig = cfg.check_pkg_config()
    missing_pkgs = {}
    if not have_pkgconfig:
        missing_pkgs["pkg-config"] = "pkg-config"
    missing.update(check_libs(args, defs, have_pkgconfig, "dpkg", SYSTEM))

    if missing:
        print("\nmissing dependencies: %s" % " ".join(missing.keys()))
        if len(missing) == 1:
            print("\nOn Ubuntu, you can install it with:\n")
        else:
            print("\nOn Ubuntu, you can install them with:\n")
        print("    $ sudo apt-get install %s" % (" ".join(missing.values())))
        sys.exit(1)


def pkg_settings(lib):
    try:
        p = subprocess.Popen(
                ["pkg-config", "--cflags", lib], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
        cflags = p.communicate()[0]
        if p.returncode != 0:
            return None
        cflags = shlex.split(cflags)
        p = subprocess.Popen(
                ["pkg-config", "--libs", lib], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
        ldflags = p.communicate()[0]
        if p.returncode != 0:
            return None
        ldflags = shlex.split(ldflags)
    except OSError:
        return None
    includes = [flag[2:] for flag in cflags if flag[:2] == "-I"]
    defines = [flag[2:] for flag in cflags if flag[:2] == "-D"]
    cflags = [flag for flag in cflags if flag[:2] not in ["-I", "-D"]]
    library_dirs = [flag[2:] for flag in ldflags if flag[:2] == "-L"]
    libraries = [flag[2:] for flag in ldflags if flag[:2] == "-l"]
    ldflags = [flag for flag in ldflags if flag[:2] not in ["-L", "-l"]]
    return includes, defines, cflags, library_dirs, libraries


def has_lib(name, includes, defines, cflags, headers, library_dirs, libraries):
    """Compile a basic C++11, libc++ binary."""
    src = []
    src.extend("#include <%s>" % i for i in headers)
    src.append("int main() { return 1; }")

    flags = []
    flags.extend("-I%s" % x for x in includes)
    flags.extend("-D%s" % x for x in defines)
    flags.extend(cflags)
    flags.extend("-L%s" % x for x in library_dirs)
    flags.extend("-l%s" % x for x in libraries)

    cmdline = ["clang"] + flags + ["-x", "c", "-", "-o", "/dev/null"]

    p = subprocess.Popen(
            cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, encoding="utf-8")
    p.communicate("\n".join(src))
    if p.returncode == 0:
        return True
    return False


if __name__ == "__main__":
    main()
