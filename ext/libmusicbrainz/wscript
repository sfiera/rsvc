# -*- mode: python -*-

def common(ctx):
    ctx.load("compiler_c compiler_cxx")
    ctx.load("core", tooldir="ext/waf-sfiera")
    ctx.external("neon")

def options(opt):
    common(opt)

def configure(cnf):
    common(cnf)
    cnf.env.append_value("LIB_libmusicbrainz/system/stdcxx", "stdc++")

def build(bld):
    common(bld)

    bld.stlib(
        target="libmusicbrainz/libmusicbrainz",
        features="universal",
        source=[
            "libmusicbrainz-4.0.0/src/Alias.cc",
            "libmusicbrainz-4.0.0/src/Annotation.cc",
            "libmusicbrainz-4.0.0/src/Artist.cc",
            "libmusicbrainz-4.0.0/src/ArtistCredit.cc",
            "libmusicbrainz-4.0.0/src/Attribute.cc",
            "libmusicbrainz-4.0.0/src/CDStub.cc",
            "libmusicbrainz-4.0.0/src/Collection.cc",
            "libmusicbrainz-4.0.0/src/Disc.cc",
            "libmusicbrainz-4.0.0/src/Entity.cc",
            "libmusicbrainz-4.0.0/src/FreeDBDisc.cc",
            "libmusicbrainz-4.0.0/src/HTTPFetch.cc",
            "libmusicbrainz-4.0.0/src/ISRC.cc",
            "libmusicbrainz-4.0.0/src/Label.cc",
            "libmusicbrainz-4.0.0/src/LabelInfo.cc",
            "libmusicbrainz-4.0.0/src/Lifespan.cc",
            "libmusicbrainz-4.0.0/src/List.cc",
            "libmusicbrainz-4.0.0/src/Medium.cc",
            "libmusicbrainz-4.0.0/src/MediumList.cc",
            "libmusicbrainz-4.0.0/src/Message.cc",
            "libmusicbrainz-4.0.0/src/Metadata.cc",
            "libmusicbrainz-4.0.0/src/NameCredit.cc",
            "libmusicbrainz-4.0.0/src/NonMBTrack.cc",
            "libmusicbrainz-4.0.0/src/PUID.cc",
            "libmusicbrainz-4.0.0/src/Query.cc",
            "libmusicbrainz-4.0.0/src/Rating.cc",
            "libmusicbrainz-4.0.0/src/Recording.cc",
            "libmusicbrainz-4.0.0/src/Relation.cc",
            "libmusicbrainz-4.0.0/src/RelationList.cc",
            "libmusicbrainz-4.0.0/src/Release.cc",
            "libmusicbrainz-4.0.0/src/ReleaseGroup.cc",
            "libmusicbrainz-4.0.0/src/Tag.cc",
            "libmusicbrainz-4.0.0/src/TextRepresentation.cc",
            "libmusicbrainz-4.0.0/src/Track.cc",
            "libmusicbrainz-4.0.0/src/UserRating.cc",
            "libmusicbrainz-4.0.0/src/UserTag.cc",
            "libmusicbrainz-4.0.0/src/Work.cc",
            "libmusicbrainz-4.0.0/src/xmlParser.cpp",
        ],
        defines=[
            "PACKAGE=\"libmusicbrainz\"",
            "VERSION=\"4.0.0\"",
        ],
        includes="libmusicbrainz-4.0.0/include",
        export_includes="libmusicbrainz-4.0.0/include",
        use="neon/libneon",
    )

    bld.program(
        target="libmusicbrainz/make-c-interface",
        source=[
            "libmusicbrainz-4.0.0/src/make-c-interface.cc",
            "libmusicbrainz-4.0.0/src/xmlParser.cpp",
        ],
        includes="libmusicbrainz-4.0.0/include",
    )

    bld.stlib(
        target="libmusicbrainz/libmusicbrainz-c",
        features="universal",
        source="c/mb4_c.cc",
        includes="include",
        export_includes="include",
        use=[
            "libmusicbrainz/libmusicbrainz",
            "libmusicbrainz/system/stdcxx",
        ],
    )

from waflib.Task import Task
class make_c_interface(Task):
    def run(self):
        return self.exec_command("cd %s && %s . %s %s %s %s" % (
            self.inputs[1].parent.abspath(),
            self.inputs[0].abspath(),
            self.inputs[1].name,
            self.outputs[0].parent.bldpath(),
            self.outputs[0].parent.name,
            self.outputs[1].parent.name,
        ))
